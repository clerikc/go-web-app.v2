# yaml-language-server: $schema=https://json.schemastore.org/github-workflow
name: CI/CD Pipeline v2

on:
  push:
    branches: [ main ]
    paths:
      - '**.go'
      - 'Dockerfile'
      - 'static/**'
      - 'k8s/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21
    
    - name: Build
      run: go build -v ./...
    
    - name: Test
      run: go test -v ./...
  
  docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.PAT_TOKEN }}
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ghcr.io/clerikc/go-web-app.v2:latest
        labels: |
          org.opencontainers.image.source=https://github.com/clerikc/go-web-app.v2

  deploy:
    needs: docker
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan ${{ secrets.VM_IP }} >> ~/.ssh/known_hosts
    
    - name: Sync static files
      run: |
        # Создаем временный архив
        tar -czf static.tar.gz ./static/*
        
        # Копируем архив на VM
        scp static.tar.gz ${{ secrets.VM_USER }}@${{ secrets.VM_IP }}:~/go-web-app.v2/
        
        # Распаковываем и заменяем файлы
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} "
          cd ~/go-web-app.v2/
          tar -xzf static.tar.gz --overwrite
          rm static.tar.gz
          chmod -R 755 static/
        "
    
    - name: Deploy to VM
      run: |
         # Копируем файлы в правильную папку
         ssh clerikc@${{ secrets.VM_IP }} "mkdir -p /home/clerikc/go-web-app.v2/static"
         scp -r ./static/* clerikc@${{ secrets.VM_IP }}:/home/clerikc/go-web-app.v2/static/
         # Применяем конфигурацию
         scp ./k8s/*.yaml clerikc@${{ secrets.VM_IP }}:/tmp/
         ssh clerikc@${{ secrets.VM_IP }} "
         kubectl apply -f /tmp/deployment.yaml
         kubectl rollout restart deployment/webapp-v2-deployment
         "
    
    - name: Verify deployment
      run: |
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} "
          echo 'Static files:'
          ls -la ~/go-web-app.v2/static/
          echo 'Pods:'
          kubectl get pods
        "
  deploy-monitoring:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan ${{ secrets.VM_IP }} >> ~/.ssh/known_hosts
    
    - name: Deploy monitoring stack
      run: |
        # Копируем конфиги мониторинга на сервер
        scp ./k8s/prometheus.yaml ${{ secrets.VM_USER }}@${{ secrets.VM_IP }}:/tmp/
        
        # Применяем конфигурации мониторинга
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} "
          # Создаем namespace если не существует
          kubectl create namespace monitoring || true
          
          # Применяем конфиги Prometheus
          kubectl apply -f /tmp/prometheus.yaml -n monitoring
          
          # Ждем пока поды поднимутся
          kubectl wait --for=condition=ready pod -l app=prometheus -n monitoring --timeout=300s
          kubectl wait --for=condition=ready pod -l app=grafana -n monitoring --timeout=300s
        "
    
    - name: Verify monitoring deployment
      run: |
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} "
          echo 'Monitoring Pods:'
          kubectl get pods -n monitoring
          echo 'Prometheus Service:'
          kubectl get svc prometheus-service -n monitoring
          echo 'Grafana Service:'
          kubectl get svc grafana-service -n monitoring
        "
    
